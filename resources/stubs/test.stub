<?php

namespace DummyNamespace;

use App\Dummy;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Route;
use Tests\TestCase;

class DummyClass extends TestCase
{
    use RefreshDatabase;

    protected $user;
    protected $dummy;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = factory('App\User')->create();
        $this->dummy = factory('App\Dummy')->create();
    }

    /** @test */
    public function unauthenticated_users_cannot_see_dummy_pages()
    {
        $this->get(route('dummys.index'))
            ->assertRedirect('/login');

        $this->get(route('dummys.show', $this->dummy->slug))
            ->assertRedirect('/login');

        $this->get(route('dummys.edit', $this->dummy->slug))
            ->assertRedirect('/login');
    }

    /** @test */
    public function user_can_see_own_dummys()
    {
        // We're making 4 more models, for a total of 5 (counting the one created in setUp)
        $this->user->dummys()->saveMany(
            factory('App\Dummy', 4)->make()
        );

        $this->actingAs($this->user)
            ->get(route('dummys.index'))
            ->assertStatus(200)
            ->assertHasProp('pager.data')
            ->assertPropCount('pager.data', 5);
    }

    /** @test */
    public function user_can_see_single_dummy()
    {
        $this->actingAs($this->user)
            ->get(route('dummys.show', $this->dummy->slug))
            ->assertStatus(200)
            ->assertHasProp('dummy');
    }

    /** @test */
    public function user_can_create_dummy()
    {
        $dummy = $this->dummy;
        $this->actingAs($this->user)
            ->get(route('dummys.create'), $dummy->toArray())
            ->assertStatus(200);
    }

    /** @test */
    public function user_can_edit_dummy()
    {
        $this->actingAs($this->user)
            ->get(route('dummys.update', $this->dummy->slug))
            ->assertStatus(200);
    }

    /** @test */
    public function user_can_delete_dummy()
    {
        $this->actingAs($this->user)
            ->get(route('dummys.destroy', $this->dummy->slug))
            ->assertStatus(200);
    }
}
